 //language property, trying to preserve original text
 private void GeneratePropertyText(object sender, RoutedEventArgs e)
        {
            var currentRegex =new Regex(@"\""(?<id>\w+[-]?\w+)\""\s*:\s*\{\s*\""name\""\s*:\s*\""(?<name>.+)\"",\s*\""desc\""\s*:\s*\""(?<desc>.+)\""");
            var currentMatches = currentRegex.Matches(PropertyLanguageTextEditor.Text);
            var propertyDictionary = new Dictionary<string, string>();

            //gather all current properties
            foreach (Match m in currentMatches)
            {
                var id = m.Groups["id"].ToString();
                var name = m.Groups["name"].ToString();
                var desc = m.Groups["desc"].ToString();

                var template = $@"    ""{id}"" : {{
        ""name"": ""{name}"",
        ""desc"": ""{desc}"",
    }}";
                propertyDictionary.Add(id, template);
            }

            //generate new property json
            var propertyRegex = new Regex(@"new SDK[.]PluginProperty\(\""(?<type>\w+)\""\W+(?<id>.*)\""");
            var propertyMatches = propertyRegex.Matches(AppData.Insatnce.CurrentAddon.PluginEditTime);

            var propList = new List<string>();
            foreach (Match m in propertyMatches)
            {
                var type = m.Groups["type"].ToString(); //todo: update property genberation based on type (combo, link etc...)
                var id = m.Groups["id"].ToString();

                if (propertyDictionary.ContainsKey(id))
                {
                    //add existing property
                    propList.Add(propertyDictionary[id]);
                }
                else
                {
                    //create new property
                    var template = $@"    ""{id}"" : {{
        ""name"": ""property name"",
        ""desc"": ""property desc"",
    }}";
                    propList.Add(template);
                }
            }

            //set the editor to the new property json
            PropertyLanguageTextEditor.Text = $@"""properties"":{{
{string.Join(",\n", propList)}
}}";
        }