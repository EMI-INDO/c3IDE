[
  {
    "Text": "true",
    "Type": 8,
    "Container": "Javascript",
    "DescriptionText": ""
  },
  {
    "Text": "false",
    "Type": 8,
    "Container": "Javascript",
    "DescriptionText": ""
  },
  {
    "Text": "self",
    "Type": 8,
    "Container": "Javascript",
    "DescriptionText": ""
  },
  {
    "Text": "this",
    "Type": 8,
    "Container": "Javascript",
    "DescriptionText": ""
  },
  {
    "Text": "C3",
    "Type": 4,
    "Container": "C3",
    "DescriptionText": "The main construct 3 runtime namespace"
  },
  {
    "Text": "Plugins",
    "Type": 4,
    "Container": "C3",
    "DescriptionText": "The plugins namespace contains exposed api for construct 3 plugins"
  },
  {
    "Text": "Behaviors",
    "Type": 4,
    "Container": "C3",
    "DescriptionText": "The plugins namespace contains exposed api for construct 3 behavior"
  },
  {
    "Text": "c3_callFunction(name, params)",
    "Type": 0,
    "Container": "C3",
    "DescriptionText": "When the Function plugin is present in a project, it creates a global function that can be used to invoke a function from JavaScript. Note this function does not exist if the Function plugin is not present in the project, so calling code should check for the existence of the method first. Synchronously trigger the function with the given name in the event system. params is optional and can be omitted if no parameters are to be passed; otherwise it must be an array of the parameters to pass. Parameters may only be string or number primitives - any other types will return as 0 in Construct. If the function in the event system returns a value, it is also returned by this method, and also can only return a string or number primitive."
  },
  {
    "Text": "Array",
    "Type": 4,
    "Container": "C3",
    "DescriptionText": "The built-in Array plugin SDK"
  },
  {
    "Text": "Tilemap",
    "Type": 4,
    "Container": "C3",
    "DescriptionText": "The built-in Tilemap plugin"
  },
  {
    "Text": "Dictionary",
    "Type": 4,
    "Container": "C3",
    "DescriptionText": "The built-in Dictionary plugin SDK"
  },
  {
    "Text": "At(x, y, z)",
    "Type": 0,
    "Container": "Array",
    "DescriptionText": "Retrieve an element from the array at the given X, Y and Z co-ordinates. For one or two dimensional access, pass 0 for the unused components."
  },
  {
    "Text": "Set(x, y, z, val)",
    "Type": 0,
    "Container": "Array",
    "DescriptionText": "Set an element in the array at the given X, Y and Z co-ordinates. For one or two dimensional access, pass 0 for the unused components."
  },
  {
    "Text": "SetSize(w, h, d)",
    "Type": 0,
    "Container": "Array",
    "DescriptionText": "Set the size of the array in up to three dimensions. For one or two dimensional arrays, pass 1 for the unused dimensions. (Note passing 0 for any dimension will create an array with zero elements that cannot store any data.) If the array grows, new elements have the value 0. If the array shrinks, elements are removed."
  },
  {
    "Text": "GetWidth()",
    "Type": 0,
    "Container": "Array",
    "DescriptionText": "Retrieve the current dimensions of the array."
  },
  {
    "Text": "GetHeight()",
    "Type": 0,
    "Container": "Array",
    "DescriptionText": "Retrieve the current dimensions of the array."
  },
  {
    "Text": "GetDepth()",
    "Type": 0,
    "Container": "Array",
    "DescriptionText": "Retrieve the current dimensions of the array."
  },
  {
    "Text": "GetDataMap()",
    "Type": 0,
    "Container": "Dictionary",
    "DescriptionText": "Return the Map which is used as the underlying data storage for the Dictionary object. This allows access to add, change, remove and iterate items."
  },
  {
    "Text": "TILE_FLIPPED_HORIZONTAL",
    "Type": 8,
    "Container": "Tilemap",
    "DescriptionText": "The Tilemap plugin exposes the following flags and masks which can be used to manipulate tile numbers"
  },
  {
    "Text": "TILE_FLIPPED_VERTICAL",
    "Type": 8,
    "Container": "Tilemap",
    "DescriptionText": "The Tilemap plugin exposes the following flags and masks which can be used to manipulate tile numbers"
  },
  {
    "Text": "TILE_FLIPPED_DIAGONAL",
    "Type": 8,
    "Container": "Tilemap",
    "DescriptionText": "The Tilemap plugin exposes the following flags and masks which can be used to manipulate tile numbers"
  },
  {
    "Text": "TILE_FLAGS_MASK",
    "Type": 8,
    "Container": "Tilemap",
    "DescriptionText": "The Tilemap plugin exposes the following flags and masks which can be used to manipulate tile numbers"
  },
  {
    "Text": "TILE_ID_MASK",
    "Type": 8,
    "Container": "Tilemap",
    "DescriptionText": "The Tilemap plugin exposes the following flags and masks which can be used to manipulate tile numbers"
  },
  {
    "Text": "GetTileWidth()",
    "Type": 0,
    "Container": "Tilemap",
    "DescriptionText": "Get the size of a tile in pixels."
  },
  {
    "Text": "GetTileHeight()",
    "Type": 0,
    "Container": "Tilemap",
    "DescriptionText": "Get the size of a tile in pixels."
  },
  {
    "Text": "GetMapWidth()",
    "Type": 0,
    "Container": "Tilemap",
    "DescriptionText": "Get the size of the tilemap in tiles."
  },
  {
    "Text": "GetMapHeight()",
    "Type": 0,
    "Container": "Tilemap",
    "DescriptionText": "Get the size of the tilemap in tiles."
  },
  {
    "Text": "GetTileAt(x, y)",
    "Type": 0,
    "Container": "Tilemap",
    "DescriptionText": "Get the tile at a given position in tiles (i.e. (0, 0) is the top-left tile of the tilemap, regardless of the tilemap's position or the tile size). Returns -1 for empty tiles or tiles outside the tilemap; otherwise use bit operations to determine tile ID or flags separately."
  },
  {
    "Text": "SetTileAt(x, y, tile)",
    "Type": 0,
    "Container": "Tilemap",
    "DescriptionText": "Set the tile at a given position in tiles. Use -1 to set a tile empty; otherwise use bit operations to combine the tile ID and flags."
  },
  {
    "Text": "_runtime",
    "Type": 5,
    "Container": "SDKBehaviorBase",
    "DescriptionText": "Reference to the associated Runtime that controls execution of the project."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "SDKBehaviorBase",
    "DescriptionText": "Returns this._runtime publicly."
  },
  {
    "Text": "OnCreate()",
    "Type": 0,
    "Container": "SDKBehaviorBase",
    "DescriptionText": "Optional override called by the runtime when the behavior is created. This is done early on in the loading process."
  },
  {
    "Text": "GetObjectClasses()",
    "Type": 0,
    "Container": "SDKBehaviorBase",
    "DescriptionText": "Return a read-only array of ObjectClass that use this kind of behavior. The order is undefined."
  },
  {
    "Text": "GetInstances()",
    "Type": 0,
    "Container": "SDKBehaviorBase",
    "DescriptionText": "Return a read-only array of Instance that use this kind of behavior. The order is undefined."
  },
  {
    "Text": "_behInst",
    "Type": 5,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Reference to the BehaviorInstance representing this behavior instance in the runtime. This allows access to Construct's built-in runtime features for behavior instances."
  },
  {
    "Text": "_inst",
    "Type": 5,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Reference to the Instance representing the associated instance in the runtime. This is the object instance that the behavior can control."
  },
  {
    "Text": "_runtime",
    "Type": 5,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Reference to the associated Runtime that controls execution of the project."
  },
  {
    "Text": "_behaviorType",
    "Type": 5,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Reference to the BehaviorType representing the behavior type that this instance belongs to."
  },
  {
    "Text": "_sdkType",
    "Type": 5,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Reference to your addon's SDK behavior type class, which derives from SDKBehaviorTypeBase."
  },
  {
    "Text": "Release()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Optional override for when a behavior instance is released."
  },
  {
    "Text": "GetBehaviorInstance()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Returns this._behInst publicly."
  },
  {
    "Text": "GetObjectInstance()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Returns this._inst publicly."
  },
  {
    "Text": "GetWorldInfo()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Returns this._inst.GetWorldInfo(), i.e. the WorldInfo for the associated object instance. Note this is only applicable when added to \"world\" type plugins, otherwise it returns null."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Returns this._runtime publicly."
  },
  {
    "Text": "GetObjectClass()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Returns this._objectClass publicly."
  },
  {
    "Text": "GetBehaviorType()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Returns this._behaviorType publicly."
  },
  {
    "Text": "GetSdkType()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Returns this._sdkType publicly."
  },
  {
    "Text": "GetBehavior()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Returns your addon's SDK behavior class, which derives from SDKBehaviorBase."
  },
  {
    "Text": "PostCreate()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Optional override called after the associated object instance has finished being created. This is useful since the behavior instance constructor is called during instance creation, so the final state is not ready yet."
  },
  {
    "Text": "Trigger(method)",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Fire a trigger condition. The condition must be declared as a trigger in aces.json. Pass a full reference to the condition method, e.g. this.Trigger(C3.Behaviors.Bullet.Cnds.OnStep)."
  },
  {
    "Text": "_StartTicking()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "_StartTicking2()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "_StartPostTicking()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "IsTicking()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "IsTicking2()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "IsPostTicking()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "_StopTicking()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "_StopTicking2()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "_StopPostTicking()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "Tick()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Optional override that is called every tick just before events are run after _StartTicking() has been called."
  },
  {
    "Text": "Tick2()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Optional override that is called every tick just after events are run after _StartTicking2() has been called."
  },
  {
    "Text": "PostTick()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Optional override that is called every tick just after all other behaviors have had their Tick() methods called. This allows behaviors to observe the state applied by other behavior's ticking. Note you should use Tick() rather than PostTick() where possible, since it is not possible to reliably observe the state applied by other behavior's post-ticking."
  },
  {
    "Text": "GetDebuggerProperties()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Override to return properties to display in the debugger. For more information see runtime scripts."
  },
  {
    "Text": "SaveToJson()",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Optional override to return a JSON object that represents the state of the instance for savegames."
  },
  {
    "Text": "LoadFromJson(o)",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Optional override accepting a JSON object returned by a prior call to SaveToJson() that represents the state of an instance to load, for savegames."
  },
  {
    "Text": "CallAction(actMethod, ...args)",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Convenience method to run an action method with the given parameters. For example: this.CallAction(C3.Behaviors.MyAddon.Acts.MyAction, \"foo\", \"bar\")"
  },
  {
    "Text": "CallExpression(expMethod, ...args)",
    "Type": 0,
    "Container": "SDKBehaviorInstance",
    "DescriptionText": "Convenience method to run an expression method with the given parameters. Returns the value returned by the expression. For example: const value = this.CallExpression(C3.Behaviors.MyAddon.Exps.MyExpression)"
  },
  {
    "Text": "_objectClass",
    "Type": 5,
    "Container": "SDKBehaviorTypeBase",
    "DescriptionText": "Reference to the ObjectClass representing the object type that this behavior type belongs to."
  },
  {
    "Text": "_behaviorType",
    "Type": 5,
    "Container": "SDKBehaviorTypeBase",
    "DescriptionText": "Reference to the BehaviorType representing this behavior type in the runtime."
  },
  {
    "Text": "_runtime",
    "Type": 5,
    "Container": "SDKBehaviorTypeBase",
    "DescriptionText": "Reference to the associated Runtime that controls execution of the project."
  },
  {
    "Text": "_behavior",
    "Type": 5,
    "Container": "SDKBehaviorTypeBase",
    "DescriptionText": "Reference to your addon's SDK behavior class, which derives from SDKBehaviorBase."
  },
  {
    "Text": "GetObjectClass()",
    "Type": 0,
    "Container": "SDKBehaviorTypeBase",
    "DescriptionText": "Returns this._objectClass publicly."
  },
  {
    "Text": "GetBehaviorType()",
    "Type": 0,
    "Container": "SDKBehaviorTypeBase",
    "DescriptionText": "Returns this._behaviorType publicly."
  },
  {
    "Text": "GetRuntime()()",
    "Type": 0,
    "Container": "SDKBehaviorTypeBase",
    "DescriptionText": "Returns this._runtime publicly."
  },
  {
    "Text": "GetBehavior()",
    "Type": 0,
    "Container": "SDKBehaviorTypeBase",
    "DescriptionText": "Returns this._behavior publicly."
  },
  {
    "Text": "_inst",
    "Type": 5,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Reference to the Instance representing this instance in the runtime. This allows access to Construct's built-in runtime features for instances."
  },
  {
    "Text": "_runtime",
    "Type": 5,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Reference to the associated Runtime that controls execution of the project."
  },
  {
    "Text": "_objectClass",
    "Type": 5,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Reference to the ObjectClass representing the object type that this instance belongs to."
  },
  {
    "Text": "_sdkType",
    "Type": 5,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Reference to your addon's SDK type class, which derives from SDKTypeBase."
  },
  {
    "Text": "Release()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Optional override for when an instance is released."
  },
  {
    "Text": "GetInstance()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Returns this._inst publicly."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Returns this._runtime publicly."
  },
  {
    "Text": "GetObjectClass()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Returns this._objectClass publicly."
  },
  {
    "Text": "GetSdkType()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Returns this._sdkType publicly."
  },
  {
    "Text": "GetPlugin()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Returns your addon's SDK plugin class, which derives from SDKPluginBase."
  },
  {
    "Text": "Trigger(method)",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Fire a trigger condition. The condition must be declared as a trigger in aces.json. Pass a full reference to the condition method, e.g. this.Trigger(C3.Plugins.Sprite.Cnds.OnAnimFinished)."
  },
  {
    "Text": "AddDOMMessageHandler(handler, callback)",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Add a callback to be run to handle a message posted from a DOM-side script. The handler is a string identifier. The callback receives the posted data as an argument. Note that if the caller in the DOM-side script originally used the PostToRuntimeAsync method, the callback may be an async function, and the return value is posted back to the DOM-side script."
  },
  {
    "Text": "PostToDOM(handler, data)",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Post a message to a DOM-side script. The handler is a string identifier. The data must be structurally clonable (since it is posted down a MessageChannel). The async method returns a promise that resolves with the DOM-side callback's return value. The non-async method does not return a value and the DOM-side callback's return value is discarded (i.e. a \"fire and forget\" message)."
  },
  {
    "Text": "PostToDOMAsync(handler, data)",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Post a message to a DOM-side script. The handler is a string identifier. The data must be structurally clonable (since it is posted down a MessageChannel). The async method returns a promise that resolves with the DOM-side callback's return value. The non-async method does not return a value and the DOM-side callback's return value is discarded (i.e. a \"fire and forget\" message)."
  },
  {
    "Text": "_StartTicking()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick() or Tick2() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "_StartTicking2()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick() or Tick2() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "IsTicking()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick() or Tick2() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "IsTicking2()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick() or Tick2() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "_StopTicking()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick() or Tick2() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "_StopTicking2()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Utility methods to start or stop the runtime calling the Tick() or Tick2() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped)."
  },
  {
    "Text": "Tick()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Optional override that is called every tick just before events are run after _StartTicking() has been called."
  },
  {
    "Text": "Tick2()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Optional override that is called every tick just after events are run after _StartTicking2() has been called."
  },
  {
    "Text": "GetDebuggerProperties()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Override to return properties to display in the debugger. For more information see runtime scripts."
  },
  {
    "Text": "SaveToJson()",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Optional override to return a JSON object that represents the state of the instance for savegames."
  },
  {
    "Text": "LoadFromJson(o)",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Optional override accepting a JSON object returned by a prior call to SaveToJson() that represents the state of an instance to load, for savegames."
  },
  {
    "Text": "CallAction(actMethod, ...args)",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Convenience method to run an action method with the given parameters. For example: this.CallAction(C3.Plugins.MyAddon.Acts.MyAction, \"foo\", \"bar\")"
  },
  {
    "Text": "CallExpression(expMethod, ...args)",
    "Type": 0,
    "Container": "SDKInstanceBase",
    "DescriptionText": "Convenience method to run an expression method with the given parameters. Returns the value returned by the expression. For example: const value = this.CallExpression(C3.Plugins.MyAddon.Exps.MyExpression)"
  },
  {
    "Text": "_runtime",
    "Type": 5,
    "Container": "SDKPluginBase",
    "DescriptionText": "Reference to the associated Runtime that controls execution of the project."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "SDKPluginBase",
    "DescriptionText": "Returns this._runtime publicly."
  },
  {
    "Text": "OnCreate()",
    "Type": 0,
    "Container": "SDKPluginBase",
    "DescriptionText": "Optional override called by the runtime when the plugin is created. This is done early on in the loading process."
  },
  {
    "Text": "IsSingleGlobal()",
    "Type": 0,
    "Container": "SDKPluginBase",
    "DescriptionText": "Return a boolean indicating if the plugin specified it was single-global."
  },
  {
    "Text": "IsWorldType()",
    "Type": 0,
    "Container": "SDKPluginBase",
    "DescriptionText": "Return a boolean indicating if the plugin specified it was the \"world\" type."
  },
  {
    "Text": "IsRotatable()",
    "Type": 0,
    "Container": "SDKPluginBase",
    "DescriptionText": "Return a boolean indicating if the plugin specified it was rotatable."
  },
  {
    "Text": "MustPreDraw()",
    "Type": 0,
    "Container": "SDKPluginBase",
    "DescriptionText": "Return a boolean indicating if the plugin specified it must pre-draw when compositing effects."
  },
  {
    "Text": "HasEffects()",
    "Type": 0,
    "Container": "SDKPluginBase",
    "DescriptionText": "Return a boolean indicating if the plugin specified it could have effects added to its instances."
  },
  {
    "Text": "_objectClass",
    "Type": 5,
    "Container": "SDKTypeBase",
    "DescriptionText": "Reference to the ObjectClass representing the object type that this instance belongs to."
  },
  {
    "Text": "_runtime",
    "Type": 5,
    "Container": "SDKTypeBase",
    "DescriptionText": "Reference to the associated Runtime that controls execution of the project."
  },
  {
    "Text": "_plugin",
    "Type": 5,
    "Container": "SDKTypeBase",
    "DescriptionText": "Reference to your addon's SDK plugin class, which derives from SDKPluginBase."
  },
  {
    "Text": "GetObjectClass()",
    "Type": 0,
    "Container": "SDKTypeBase",
    "DescriptionText": "Returns this._objectClass publicly."
  },
  {
    "Text": "GetRuntime()()",
    "Type": 0,
    "Container": "SDKTypeBase",
    "DescriptionText": "Returns this._runtime publicly."
  },
  {
    "Text": "GetPlugin()",
    "Type": 0,
    "Container": "SDKTypeBase",
    "DescriptionText": "Returns this._plugin publicly."
  },
  {
    "Text": "LoadTextures(renderer)",
    "Type": 0,
    "Container": "SDKTypeBase",
    "DescriptionText": "Optional override called by the runtime when it wants your object type's textures to be created. renderer is the same class used in the editor as IWebGLRenderer. This method should return a promise that resolves when all textures have been loaded."
  },
  {
    "Text": "ReleaseTextures()",
    "Type": 0,
    "Container": "SDKTypeBase",
    "DescriptionText": "Optional override called by the runtime when it wants your object type's textures to be released. This method is synchronous. Release any WebGL textures and drop the references to them."
  },
  {
    "Text": "OnDynamicTextureLoadComplete()",
    "Type": 0,
    "Container": "SDKTypeBase",
    "DescriptionText": "Optional override called by the runtime when a dynamic texture load has completed. If an object is created at runtime that does not already have its textures loaded, the runtime will call LoadTextures() but continue running the game while the textures are loaded asynchronously. When they finish loading, the runtime then calls this override so you have an opportunity to update any references to the newly loaded texture."
  },
  {
    "Text": "_worldInfo",
    "Type": 5,
    "Container": "SDKWorldInstanceBase",
    "DescriptionText": "Return the WorldInfo object that represents this instance's state in the \"world\" (e.g. its size, position, angle etc). In the runtime this is held as a separate object."
  },
  {
    "Text": "GetWorldInfo()",
    "Type": 0,
    "Container": "SDKWorldInstanceBase",
    "DescriptionText": "Returns this._worldInfo publicly."
  },
  {
    "Text": "HandleWebGLContextLoss()",
    "Type": 0,
    "Container": "SDKWorldInstanceBase",
    "DescriptionText": "Utility method to enable calling of the OnWebGLContextLost() and OnWebGLContextRestored() methods."
  },
  {
    "Text": "OnWebGLContextLost()",
    "Type": 0,
    "Container": "SDKWorldInstanceBase",
    "DescriptionText": "Optional overrides for handling WebGL context loss. This is only necessary if your addon creates any WebGL resources. These overrides are only called if your instance first calls HandleWebGLContextLoss() (normally in the constructor to enable these callbacks for the lifetime of the instance). In a context loss event, all WebGL resources have been released, so any references to them must be dropped. In a context restored event the resources may be recreated again if necessary. Alternatively they can be left released if a lazy-loading approach is used."
  },
  {
    "Text": "OnWebGLContextRestored()",
    "Type": 0,
    "Container": "SDKWorldInstanceBase",
    "DescriptionText": "Optional overrides for handling WebGL context loss. This is only necessary if your addon creates any WebGL resources. These overrides are only called if your instance first calls HandleWebGLContextLoss() (normally in the constructor to enable these callbacks for the lifetime of the instance). In a context loss event, all WebGL resources have been released, so any references to them must be dropped. In a context restored event the resources may be recreated again if necessary. Alternatively they can be left released if a lazy-loading approach is used."
  },
  {
    "Text": "GetEventSheetManager()",
    "Type": 0,
    "Container": "EventBlock",
    "DescriptionText": "Return the associated EventSheetManager."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "EventBlock",
    "DescriptionText": "Return the associated Runtime."
  },
  {
    "Text": "GetParent()",
    "Type": 0,
    "Container": "EventBlock",
    "DescriptionText": "Return the parent EventBlock, or null if this is a top-level event."
  },
  {
    "Text": "IsOrBlock()",
    "Type": 0,
    "Container": "EventBlock",
    "DescriptionText": "If true, this is an OR block, else it is an AND block."
  },
  {
    "Text": "GetSolModifiers()",
    "Type": 0,
    "Container": "EventBlock",
    "DescriptionText": "Return an array of ObjectClass that the event block may modify."
  },
  {
    "Text": "Retrigger(oldFrame, newFrame)",
    "Type": 0,
    "Container": "EventBlock",
    "DescriptionText": "Re-run the current event. This is useful for implementing looping conditions. Prior to calling this, you must push a new EventStackFrame, and pass both the old and the new stack frames to this call. Be sure to pop the pushed stack frame once complete. See the code sample above."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "EventSheetManager",
    "DescriptionText": "Return the associated Runtime."
  },
  {
    "Text": "GetEventStack()",
    "Type": 0,
    "Container": "EventSheetManager",
    "DescriptionText": "Return the EventStack representing the current execution stack in the event system."
  },
  {
    "Text": "GetCurrentEventStackFrame()",
    "Type": 0,
    "Container": "EventSheetManager",
    "DescriptionText": "Return the current EventStackFrame, representing the current execution context in the event system. This is a shorthand for GetEventStack().GetCurrentStackFrame()."
  },
  {
    "Text": "GetCurrentEvent()",
    "Type": 0,
    "Container": "EventSheetManager",
    "DescriptionText": "Return the current EventBlock being executed. This is a shorthand for GetCurrentEventStackFrame().GetCurrentEvent()."
  },
  {
    "Text": "IsInTrigger()",
    "Type": 0,
    "Container": "EventSheetManager",
    "DescriptionText": "True if execution is currently within a triggered event."
  },
  {
    "Text": "ClearSol(objectClasses)",
    "Type": 0,
    "Container": "EventSheetManager",
    "DescriptionText": "For each ObjectClass in the given array, reset the selected object list (SOL) back to \"all picked\" state."
  },
  {
    "Text": "PushCleanSol(objectClasses)",
    "Type": 0,
    "Container": "EventSheetManager",
    "DescriptionText": "For each ObjectClass in the given array, push a new selected object list (SOL) to the SOL stack. PushCleanSol pushes cleared SOLs in the \"all picked\" state, whereas PushCopySol pushes a copy of the top SOL. These methods are necessary when retriggering events. Every pushed SOL must have a corresponding PopSol call."
  },
  {
    "Text": "PushCopySol(objectClasses)",
    "Type": 0,
    "Container": "EventSheetManager",
    "DescriptionText": "For each ObjectClass in the given array, push a new selected object list (SOL) to the SOL stack. PushCleanSol pushes cleared SOLs in the \"all picked\" state, whereas PushCopySol pushes a copy of the top SOL. These methods are necessary when retriggering events. Every pushed SOL must have a corresponding PopSol call."
  },
  {
    "Text": "PopSol(objectClasses)",
    "Type": 0,
    "Container": "EventSheetManager",
    "DescriptionText": "For each ObjectClass in the given array, pop the top SOL on the SOL stack. This must be called after PushCleanSol or PushCopySol."
  },
  {
    "Text": "GetEventSheetManager()",
    "Type": 0,
    "Container": "EventStack",
    "DescriptionText": "Return the associated EventSheetManager."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "EventStack",
    "DescriptionText": "Return the associated Runtime."
  },
  {
    "Text": "GetCurrentStackFrame()",
    "Type": 0,
    "Container": "EventStack",
    "DescriptionText": "Return the current EventStackFrame."
  },
  {
    "Text": "Push(currentEvent)",
    "Type": 0,
    "Container": "EventStack",
    "DescriptionText": "Push a new EventStackFrame to the event stack, and return it. The initial current EventBlock for the new stack frame must be passed to this call. Every push must have a corresponding Pop call."
  },
  {
    "Text": "Pop()",
    "Type": 0,
    "Container": "EventStack",
    "DescriptionText": "Pop the top EventStackFrame from the event stack. This must be called after every Push call."
  },
  {
    "Text": "GetCurrentEvent()",
    "Type": 0,
    "Container": "EventStackFrame",
    "DescriptionText": "Return the currently executing EventBlock."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "AssetManager",
    "DescriptionText": "Return the associated Runtime."
  },
  {
    "Text": "async FetchBlob(url)",
    "Type": 0,
    "Container": "AssetManager",
    "DescriptionText": "Fetch a blob from a given URL. Returns a promise that resolves with the fetched blob. Note this method handles various cross-platform details when used to fetch project files so is preferable if the content being requested will be used as a blob."
  },
  {
    "Text": "async FetchJson(url)",
    "Type": 0,
    "Container": "AssetManager",
    "DescriptionText": "As with FetchBlob(), but returns the content in JSON format."
  },
  {
    "Text": "async LoadProjectFileUrl(filename)",
    "Type": 0,
    "Container": "AssetManager",
    "DescriptionText": "Obtain a URL to a given project filename that can be directly fetched. On some platforms this will be translated to a blob URL; in other cases it will simply return the filename if it can already be directly fetched. Note this method returns a promise that resolves with the URL to use."
  },
  {
    "Text": "GetLayout()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Return the Layout the layer belongs to."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Return the Runtime for this layer."
  },
  {
    "Text": "GetName()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Return a string of the name of the layer."
  },
  {
    "Text": "GetIndex()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Return the zero-based index of this layer on its layout."
  },
  {
    "Text": "SetVisible(v)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set or get a boolean determining whether the layer is visible."
  },
  {
    "Text": "IsVisible()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set or get a boolean determining whether the layer is visible."
  },
  {
    "Text": "GetViewport()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Return a C3.Rect representing the axis-aligned bounding box of the visible area of the layer in layout co-ordinates."
  },
  {
    "Text": "SetOpacity(o)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the opacity of the layer in the [0,1] range. 0 is fully transparent and 1 is opaque. This changes the alphacomponent of the layer color."
  },
  {
    "Text": "GetOpacity()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the opacity of the layer in the [0,1] range. 0 is fully transparent and 1 is opaque. This changes the alphacomponent of the layer color."
  },
  {
    "Text": "SetOwnScale(s)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the layer's scale as a factor."
  },
  {
    "Text": "GetOwnScale()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the layer's scale as a factor."
  },
  {
    "Text": "GetRenderScale()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Get the scale the layer is rendered at. This is the scale relevant to draw calls."
  },
  {
    "Text": "GetDisplayScale()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Get the scale the layer is rendered at. This is the scale relevant for translating co-ordinates from the canvas/window tothe layer."
  },
  {
    "Text": "GetNormalScale()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Get the scale of the layer only using its own scale, the layout scale, and the scale rate."
  },
  {
    "Text": "SetScaleRate(r)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the scale rate of the layer as a multiplier."
  },
  {
    "Text": "GetScaleRate()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the scale rate of the layer as a multiplier."
  },
  {
    "Text": "SetParallaxX(px)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the X and Y parallax ratios for the layer, as multipliers."
  },
  {
    "Text": "SetParallaxY(py)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the X and Y parallax ratios for the layer, as multipliers."
  },
  {
    "Text": "SetParallax(px, py)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the X and Y parallax ratios for the layer, as multipliers."
  },
  {
    "Text": "GetParallaxX()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the X and Y parallax ratios for the layer, as multipliers."
  },
  {
    "Text": "GetParallaxY()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the X and Y parallax ratios for the layer, as multipliers."
  },
  {
    "Text": "SetAngle(a)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the layer's angle in radians. Use C3.toDegrees() and C3.toRadians() to convert from degrees to radians."
  },
  {
    "Text": "GetOwnAngle()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the layer's angle in radians. Use C3.toDegrees() and C3.toRadians() to convert from degrees to radians."
  },
  {
    "Text": "GetAngle()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Get the layer's display angle in radians. This is also affected by the layout angle."
  },
  {
    "Text": "GetBackgroundColor()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Return a C3.Color representing the layer background color. Only the RGB components are used."
  },
  {
    "Text": "SetTransparent(t)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get a boolean indicating if the layer background is transparent."
  },
  {
    "Text": "IsTransparent()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get a boolean indicating if the layer background is transparent."
  },
  {
    "Text": "SetBlendMode(bm)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the layer blend mode, as an index in to the dropdown list used in Construct's Blend mode property. E.g. 0 is\"normal\", 1 is \"additive\", etc."
  },
  {
    "Text": "GetBlendMode()",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Set and get the layer blend mode, as an index in to the dropdown list used in Construct's Blend mode property. E.g. 0 is\"normal\", 1 is \"additive\", etc."
  },
  {
    "Text": "MoveInstanceAdjacent(inst, otherInst, isAfter)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Move the Instance inst adjacent to otherInst in the Z order. If isAfter is true it moves inst just after (above) otherInstin the Z order; otherwise it moves inst just before (below)."
  },
  {
    "Text": "CanvasCssToLayer(x, y)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Translate CSS pixel co-ordinates on the canvas to layout co-ordinates on the layer, and vice versa. Returns [x, y]."
  },
  {
    "Text": "LayerToCanvasCss(x, y)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Translate CSS pixel co-ordinates on the canvas to layout co-ordinates on the layer, and vice versa. Returns [x, y]."
  },
  {
    "Text": "DrawSurfaceToLayer(x, y)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Translate device pixels on the rendered surface to layout co-ordinates on the layer, and vice versa. Returns [x, y]."
  },
  {
    "Text": "LayerToDrawSurface(x, y)",
    "Type": 0,
    "Container": "Layer",
    "DescriptionText": "Translate device pixels on the rendered surface to layout co-ordinates on the layer, and vice versa. Returns [x, y]."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Return the Runtime for this layout."
  },
  {
    "Text": "GetName()",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Return a string of the name of the layout."
  },
  {
    "Text": "SetScrollX(x)",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Set and get the scroll position in layout co-ordinates."
  },
  {
    "Text": "SetScrollY(y)",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Set and get the scroll position in layout co-ordinates."
  },
  {
    "Text": "GetScrollX()",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Set and get the scroll position in layout co-ordinates."
  },
  {
    "Text": "GetScrollY()",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Set and get the scroll position in layout co-ordinates."
  },
  {
    "Text": "SetScale(s)",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Set and get the layout scale as a multiplier. Note that the layout scale affects all layers."
  },
  {
    "Text": "GetScale()",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Set and get the layout scale as a multiplier. Note that the layout scale affects all layers."
  },
  {
    "Text": "SetAngle(a)",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Set and get the layout angle in radians. Note that the layout angle affects all layers. Use C3.toDegrees() and C3.toRadias() to convert from degrees to radians."
  },
  {
    "Text": "GetAngle()",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Set and get the layout angle in radians. Note that the layout angle affects all layers. Use C3.toDegrees() and C3.toRadins() to convert from degrees to radians."
  },
  {
    "Text": "GetWidth()",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Get the size of the layout."
  },
  {
    "Text": "GetHeight()",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Get the size of the layout."
  },
  {
    "Text": "GetLayerCount()",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Return the number of Layers on this layout."
  },
  {
    "Text": "GetLayer(p)",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Get a Layer on the layout either by its zero-based index or a case-insensitive string of its name. The GetLayer() method accepts eiher an index or a name."
  },
  {
    "Text": "GetLayerByIndex(i)",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Get a Layer on the layout either by its zero-based index or a case-insensitive string of its name. The GetLayer() method accepts either anindex or a name."
  },
  {
    "Text": "GetLayerByName(name)",
    "Type": 0,
    "Container": "Layout",
    "DescriptionText": "Get a Layer on the layout either by its zero-based index or a case-insensitive string of its name. The GetLayer() method accepts either an idex or a name."
  },
  {
    "Text": "GetSdkInstance()",
    "Type": 0,
    "Container": "BehaviorInstance",
    "DescriptionText": "Return the behavior-specific behavior instance class, which derives from SDKBehaviorInstanceBase."
  },
  {
    "Text": "GetObjectInstance()",
    "Type": 0,
    "Container": "BehaviorInstance",
    "DescriptionText": "Return the Instance associated with this behavior instance."
  },
  {
    "Text": "GetBehaviorType()",
    "Type": 0,
    "Container": "BehaviorInstance",
    "DescriptionText": "Return the BehaviorType this behavior belongs to."
  },
  {
    "Text": "GetBehavior()",
    "Type": 0,
    "Container": "BehaviorInstance",
    "DescriptionText": "Return the behavior-specific class that derives from SDKBehaviorBase."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "BehaviorInstance",
    "DescriptionText": "Return the Runtime for this behavior instance."
  },
  {
    "Text": "GetSdkType()",
    "Type": 0,
    "Container": "BehaviorType",
    "DescriptionText": "Return the behavior-specific behavior type class, which derives from SDKBehaviorTypeBase."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "BehaviorType",
    "DescriptionText": "Get the Runtime for the behavior type."
  },
  {
    "Text": "GetObjectClass()",
    "Type": 0,
    "Container": "BehaviorType",
    "DescriptionText": "Get the ObjectClass that the behavior type was added to. Note this can be either an object type or a family."
  },
  {
    "Text": "GetBehavior()",
    "Type": 0,
    "Container": "BehaviorType",
    "DescriptionText": "Return the behavior-specific class that derives from SDKBehaviorBase."
  },
  {
    "Text": "GetName()",
    "Type": 0,
    "Container": "BehaviorType",
    "DescriptionText": "Return a string of the name of the behavior type"
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "Container",
    "DescriptionText": "Return the Runtime for this container."
  },
  {
    "Text": "GetObjectTypes()",
    "Type": 0,
    "Container": "Container",
    "DescriptionText": "Return a read-only array of ObjectClass representing the object classes that have been added to the container."
  },
  {
    "Text": "GetWorldInfo()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "For \"world\" type plugins, get the instance's associated WorldInfo. This allows modification of the position, size, angle etc."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Get the Runtime for this instance."
  },
  {
    "Text": "GetSdkInstance()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Get the plugin-specific instance class for this instance, which derives from SDKInstanceBase. See also Addon interfaces for the public APIs exposed by some of the built-in addons in Construct."
  },
  {
    "Text": "GetObjectClass()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Get the ObjectClass representing the object type this instance belongs to."
  },
  {
    "Text": "GetPlugin()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Return the plugin class for this instance, which derives from SDKPluginBase."
  },
  {
    "Text": "BelongsToObjectClass(objectClass)",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Returns true if this instance's object class is the given object class, or the given object class is a family and this instance's object class is a member of that family."
  },
  {
    "Text": "GetImagePoint(nameOrIndex)",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Get an image point from the instance by either its index or a string of its name. Note image points are returned in a [0,1] range, such that 0.5 represents the middle."
  },
  {
    "Text": "IsInContainer()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Returns true if the instance is in a container."
  },
  {
    "Text": "GetSiblings()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Return a read-only array of sibling instances for this instance, i.e. its associated other instances in its container. This is only applicable if the instance is in a container."
  },
  {
    "Text": "GetUID()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Get the unique identifier (UID) for this instance. UIDs are unique integer numbers assigned to every instance, and never change during the lifetime of the instance."
  },
  {
    "Text": "GetIID()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Get the instance identifier (IID) for this instance. IIDs are the zero-based index of this instance in its object type's instance list. Note IIDs can change during the lifetime of the instance; if an instance with a lower IID is destroyed, all instances with higher IIDs are renumbered so the IIDs are contiguous from 0."
  },
  {
    "Text": "GetBehaviorInstances()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Return a read-only array of BehaviorInstance for this instance."
  },
  {
    "Text": "GetBehaviorInstanceFromCtor(ctor)",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Look up a behavior instance by its behavior constructor. For example GetBehaviorInstanceFromCtor(C3.Behaviors.Platform) will return the first BehaviorInstance for the Platform behavior if the instance has one, else null."
  },
  {
    "Text": "GetBehaviorSdkInstanceFromCtor(ctor)",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "As with GetBehaviorInstanceFromCtor(ctor), but returns the behavior-specific behavior instance class (which derives from SDKBehaviorInstanceBase) instead."
  },
  {
    "Text": "GetInstanceVariableCount()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Return the number of instance variables for this instance."
  },
  {
    "Text": "SetInstanceVariableValue(index, value)",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Set or get an instance variable value by its index. Note the type of the instance variable will be preserved."
  },
  {
    "Text": "GetInstanceVariableValue(index)",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Set or get an instance variable value by its index. Note the type of the instance variable will be preserved."
  },
  {
    "Text": "GetSavedDataMap()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Return a Map to store additional data to associate with this instance. Use string keys only, and ensure keys are unique. The saved data map is written to savegame files so should be used for persistent state. The unsaved data map is not written to savegame files so should be used for transient storage or caching."
  },
  {
    "Text": "GetUnsavedDataMap()",
    "Type": 0,
    "Container": "Instance",
    "DescriptionText": "Return a Map to store additional data to associate with this instance. Use string keys only, and ensure keys are unique. The saved data map is written to savegame files so should be used for persistent state. The unsaved data map is not written to savegame files so should be used for transient storage or caching."
  },
  {
    "Text": "GetSdkType()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Return the plugin-specific SDK type class, which derives from SDKTypeBase."
  },
  {
    "Text": "GetPlugin()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Return the plugin class for this object class, which derives from SDKPluginBase."
  },
  {
    "Text": "GetRuntime()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Return the Runtime for this object class."
  },
  {
    "Text": "GetName()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Return a string of the name of this object class."
  },
  {
    "Text": "IsGlobal()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Return a boolean indicating if this is a global object class. Global instances are not destroyed when changing layout."
  },
  {
    "Text": "IsWorldType()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Return a boolean indicating if the associated plugin is a \"world\" type."
  },
  {
    "Text": "GetBehaviorTypes()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Return a read-only array of BehaviorType representing behaviors added to this object class."
  },
  {
    "Text": "IsFamily()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Return a boolean indicating if this is an object type (if false) or family (if true)."
  },
  {
    "Text": "GetFamilies()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "For object types only. Return a read-only array of families (also ObjectClass) that this object type belongs to."
  },
  {
    "Text": "GetFamilyMembers()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "For families only. Return a read-only array of object types (also ObjectClass) that are in this family."
  },
  {
    "Text": "GetInstances()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Return a read-only array of Instance that have been created."
  },
  {
    "Text": "GetSingleGlobalInstance()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "For single-global plugins only. Returns the single-global instance of the object."
  },
  {
    "Text": "GetFirstPicked()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Return the first picked Instance in an action, condition or expression."
  },
  {
    "Text": "IsInContainer()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Return true if the object class is in a container."
  },
  {
    "Text": "GetContainer()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "If the object class is in a container, return the Container class representing the container. Otherwise returns null."
  },
  {
    "Text": "HasSolidBehavior()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Convenience methods to indicate if the given behavior has been added to the object class."
  },
  {
    "Text": "HasNoSaveBehavior()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Convenience methods to indicate if the given behavior has been added to the object class."
  },
  {
    "Text": "HasPersistBehavior()",
    "Type": 0,
    "Container": "ObjectClass",
    "DescriptionText": "Convenience methods to indicate if the given behavior has been added to the object class."
  },
  {
    "Text": "GetInstance()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Return the associated Instance that this WorldInfo represents state for."
  },
  {
    "Text": "SetX(x)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the position of the instance in layout co-ordinates."
  },
  {
    "Text": "SetY(y)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the position of the instance in layout co-ordinates."
  },
  {
    "Text": "SetXY(x, y)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the position of the instance in layout co-ordinates."
  },
  {
    "Text": "GetX()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the position of the instance in layout co-ordinates."
  },
  {
    "Text": "GetY()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the position of the instance in layout co-ordinates."
  },
  {
    "Text": "OffsetX(x)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Add to the X and Y components of the instance's position. For example OffsetX(5) is equivalent to SetX(GetX() + 5)."
  },
  {
    "Text": "OffsetY(y)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Add to the X and Y components of the instance's position. For example OffsetX(5) is equivalent to SetX(GetX() + 5)."
  },
  {
    "Text": "OffsetXY(x, y)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Add to the X and Y components of the instance's position. For example OffsetX(5) is equivalent to SetX(GetX() + 5)."
  },
  {
    "Text": "SetWidth(w)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the width and height of the instance in layout co-ordinates."
  },
  {
    "Text": "SetHeight(h)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the width and height of the instance in layout co-ordinates."
  },
  {
    "Text": "SetSize(w, h)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the width and height of the instance in layout co-ordinates."
  },
  {
    "Text": "GetWidth()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the width and height of the instance in layout co-ordinates."
  },
  {
    "Text": "GetHeight()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the width and height of the instance in layout co-ordinates."
  },
  {
    "Text": "SetAngle(a)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the angle of the instance in radians. Use C3.toDegrees() and C3.toRadians() to convert from degrees to radians."
  },
  {
    "Text": "GetAngle(",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": ""
  },
  {
    "Text": "SetOrigiX(x)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the origin of the instance as a normalized position in the [0,1] range, i.e. 0.5 is the middle."
  },
  {
    "Text": "SetOriginY(y)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the origin of the instance as a normalized position in the [0,1] range, i.e. 0.5 is the middle."
  },
  {
    "Text": "GetOriginX()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the origin of the instance as a normalized position in the [0,1] range, i.e. 0.5 is the middle."
  },
  {
    "Text": "GetOriginY()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the origin of the instance as a normalized position in the [0,1] range, i.e. 0.5 is the middle."
  },
  {
    "Text": "SetBboxChanged()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Mark the instance's bounding box as having been changed. Call this after altering the position, size, angle or origin of the instance."
  },
  {
    "Text": "GetBoundingBox()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Return a C3.Rect representing the axis-aligned bounding box of the instance in layout co-ordinates."
  },
  {
    "Text": "GetBoundingQuad()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Return a C3.Quad representing the bounding quad of the instance in layout co-ordinates, which is essentially the rotated bounding box."
  },
  {
    "Text": "SetOpacity(o)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the opacity of the instance in the [0,1] range. 0 is fully transparent and 1 is opaque. This changes the alpha component of the instance color."
  },
  {
    "Text": "GetOpacity()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the opacity of the instance in the [0,1] range. 0 is fully transparent and 1 is opaque. This changes the alpha component of the instance color."
  },
  {
    "Text": "SetUnpremultipliedColor(c)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set the RGB components of the instance color. This applies a built-in color multiply effect which appears like a tint. As with opacity, color values are in the [0,1] range. The default is RGB 1,1,1 (white) which means the instance appears with normal colors. Pass a C3.Color as the parameter. The runtime internally uses premultiplied alpha for best rendering quality; in this method the RGB values do not need to be premultiplied with the alpha (opacity) value, since it will apply the premultiplication for you."
  },
  {
    "Text": "GetUnpremultipliedColor()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Get the instance color as a read-only C3.Color, either without or with premultiplied alpha (respectively). The instance color includes the opacity in the alpha channel."
  },
  {
    "Text": "GetPremultipliedColor()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Get the instance color as a read-only C3.Color, either without or with premultiplied alpha (respectively). The instance color includes the opacity in the alpha channel."
  },
  {
    "Text": "HasDefaultColor()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Returns true if the instance color RGBA value equals (1,1,1,1), else false."
  },
  {
    "Text": "SetBlendMode(bm)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the instance blend mode, as an index in to the dropdown list used in Construct's Blend mode property. E.g. 0 is \"normal\", 1 is \"additive\", etc."
  },
  {
    "Text": "GetBlendMode()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the instance blend mode, as an index in to the dropdown list used in Construct's Blend mode property. E.g. 0 is \"normal\", 1 is \"additive\", etc."
  },
  {
    "Text": "GetLayer()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Get the Layer the instance is currently on."
  },
  {
    "Text": "GetLayout()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Get the Layout the instance currently belongs to."
  },
  {
    "Text": "SetVisible(v)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the visible state for the instance. This is a boolean that hides the instance when set to false."
  },
  {
    "Text": "IsVisible()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get the visible state for the instance. This is a boolean that hides the instance when set to false."
  },
  {
    "Text": "SetCollisionEnabled(e)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get a boolean indicating whether collisions are enabled for this instance."
  },
  {
    "Text": "IsCollisionEnabled()",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Set and get a boolean indicating whether collisions are enabled for this instance."
  },
  {
    "Text": "ContainsPoint(x, y)",
    "Type": 0,
    "Container": "WorldInfo",
    "DescriptionText": "Test if a point in layout co-ordinates intersects this instance, respecting its collision polygon and collisions enabled flag."
  },
  {
    "Text": "GetAssetManager()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return the project's AssetManager, which is used to load sub-resources."
  },
  {
    "Text": "AddLoadPromise(promise)",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Only valid while the project is still loading. Add a promise that the runtime will wait to resolve before starting the first layout. This is useful if you want to make sure your addon loads a dynamic resource before the game starts. Single-global plugins create their instance before loading, so this method can be used in single-global instance constructors. Otherwise it can only be used in the plugin or behavior constructor."
  },
  {
    "Text": "IsInWorker()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return true if the runtime is hosted in a worker. The DOM will be unavailable."
  },
  {
    "Text": "IsPreview()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Returns true if running in Construct 3's preview mode."
  },
  {
    "Text": "GetAllObjectClasses()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return a read-only array of all ObjectClass in the project. Note this includes families."
  },
  {
    "Text": "GetObjectClassByName(name)",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Look up an ObjectClass by a case-insensitive string of its name. Note this can return a family."
  },
  {
    "Text": "GetSingleGlobalObjectClassByCtor(ctor)",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Look up a single-global plugin's ObjectClass by its plugin constructor function, e.g. C3.Plugins.Facebook. Returns null if the plugin is not added to the project."
  },
  {
    "Text": "CreateInstance(objectClass, layer, x, y)",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Create and return a new Instance of an ObjectClass on the given Layer at a position."
  },
  {
    "Text": "DestroyInstance(inst)",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Destroy an Instance."
  },
  {
    "Text": "GetObjectCount()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Get the total number of instances created."
  },
  {
    "Text": "GetInstanceByUID(uid)",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Look up an Instance by its UID. If none exists with the given UID, returns null."
  },
  {
    "Text": "GetEventSheetManager()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return the EventSheetManager that handles the event system."
  },
  {
    "Text": "GetEventStack()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return the EventStack. This is a shorthand for GetEventSheetManager().GetEventStack()."
  },
  {
    "Text": "GetCurrentEventStackFrame()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return the current EventStackFrame. This is a shorthand for GetEventSheetManager().GetCurrentEventStackFrame()."
  },
  {
    "Text": "GetCurrentEvent()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return the current EventBlock. This is a shorthand for GetEventSheetManager().GetCurrentEvent()."
  },
  {
    "Text": "GetCanvasClientX()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return the offset of the canvas in the document in CSS pixels."
  },
  {
    "Text": "GetCanvasClientY()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return the offset of the canvas in the document in CSS pixels."
  },
  {
    "Text": "GetCanvasCssWidth()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return the size of the canvas in the document in CSS pixels."
  },
  {
    "Text": "GetCanvasCssHeight()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return the size of the canvas in the document in CSS pixels."
  },
  {
    "Text": "IsLinearSampling()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return true if the project is set to use linear sampling. False indicates point sampling."
  },
  {
    "Text": "UpdateRender()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Call to indicate that something visible has changed. Most runtime code calls this automatically. However by default if this is not called during a tick, the runtime will skip drawing a frame on the assumption nothing visible has changed."
  },
  {
    "Text": "GetWebGLRenderer()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return the WebGLRenderer for the runtime, which is responsible for rendering graphics."
  },
  {
    "Text": "GetMainRunningLayout()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return the main Layout that is currently running."
  },
  {
    "Text": "SetTimescale(t)",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Set and get the timescale as a multiplier."
  },
  {
    "Text": "GetTimescale()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Set and get the timescale as a multiplier."
  },
  {
    "Text": "GetStartTime()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Get the timestamp in milliseconds at the time the runtime started up."
  },
  {
    "Text": "GetGameTime()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Get the in-game time in seconds, which can be affected by time scaling."
  },
  {
    "Text": "GetWallTime()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Get the in-game time in seconds without taking in to account time scaling (aka the \"wall clock\" time)."
  },
  {
    "Text": "GetTickCount()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Get the number of ticks that have elapsed so far."
  },
  {
    "Text": "GetProjectName()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return a string of the name and version of the project."
  },
  {
    "Text": "GetProjectVersion()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return a string of the name and version of the project."
  },
  {
    "Text": "GetProjectUniqueId()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Return a string representing a unique identifier for this project."
  },
  {
    "Text": "SetPixelRoundingEnabled(e)",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Set and get a boolean indicating whether pixel rounding is enabled."
  },
  {
    "Text": "IsPixelRoundingEnabled()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Set and get a boolean indicating whether pixel rounding is enabled."
  },
  {
    "Text": "InvokeDownload(url, filename)",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Invoke a download of the given URL and use the provided filename. The URL can be a blob URL."
  },
  {
    "Text": "Random()",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Generate a random number in the range [0,1), which is the same range as Math.random(). Use this method to allow the runtime control over the random number generator, e.g. setting a fixed seed to reproduce the same random sequence."
  },
  {
    "Text": "SetSuspended(suspend)",
    "Type": 0,
    "Container": "Runtime",
    "DescriptionText": "Pass true to suspend the runtime or false to resume it if paused. When suspended, the entire runtime halts and stops processing events or drawing the screen. This is done by default when the window or app goes in to the background. Make sure that suspend and resume calls are paired one-to-one. For example do not suspend once but resume twice."
  },
  {
    "Text": "setRgb(r, g, b)",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Set the RGB components only, without affecting the alpha component, in a single call."
  },
  {
    "Text": "setRgba(r, g, b, a)",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Set the RGBA components of the color in a single call."
  },
  {
    "Text": "copy(color)",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Set the components of the color by copying another SDK.Color."
  },
  {
    "Text": "copyRgb(color)",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Set the RGB components only, without affecting the alpha component, by copying another SDK.Color."
  },
  {
    "Text": "clone()",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Return a new instance of an SDK.Color with an identical color to this one."
  },
  {
    "Text": "setR(r)",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Set each component of the color individually. Note color components are floats in the range [0, 1]."
  },
  {
    "Text": "setG(g)",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Set each component of the color individually. Note color components are floats in the range [0, 1]."
  },
  {
    "Text": "setB(b)",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Set each component of the color individually. Note color components are floats in the range [0, 1]."
  },
  {
    "Text": "setA(a)",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Set each component of the color individually. Note color components are floats in the range [0, 1]."
  },
  {
    "Text": "getR()",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Get each component of the color individually."
  },
  {
    "Text": "getG()",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Get each component of the color individually."
  },
  {
    "Text": "getB()",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Get each component of the color individually."
  },
  {
    "Text": "getA()",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Get each component of the color individually."
  },
  {
    "Text": "equals(color)",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Return a boolean indicating if this color exactly matches another SDK.Color."
  },
  {
    "Text": "equalsIgnoringAlpha(color)",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Return a boolean indicating if this color exactly matches the RGB components of another SDK.Color. The alpha component is ignoed."
  },
  {
    "Text": "equalsRgb(r, g, b)",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Return a boolean indicating if this color exactly matches the given RGB components."
  },
  {
    "Text": "equalsRgba(r, g, b, a)",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Return a boolean indicating if this color exactly matches the given RGBA components."
  },
  {
    "Text": "premultiply()",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Multiply the RGB components by the A component. This is usually required for rendering."
  },
  {
    "Text": "unpremultiply()",
    "Type": 0,
    "Container": "Color",
    "DescriptionText": "Divide the RGB components by the A component"
  },
  {
    "Text": "set(tlx, tly, trx, try_, brx, bry, blx, bly)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set all four points of the quad in a single call."
  },
  {
    "Text": "setRect(left, top, right, bottom)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set the quad's points to represent an axis-aligned rectangle using the given positions. Note that this is only useful if you subsequently make further modifications to the quad, else you may as well use the Rect interface."
  },
  {
    "Text": "copy(quad)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set all points of the quad by copying another SDK.Quad."
  },
  {
    "Text": "setTlx(n)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set each point of the quad individually."
  },
  {
    "Text": "setTly(n)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set each point of the quad individually."
  },
  {
    "Text": "setTrx(n)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set each point of the quad individually."
  },
  {
    "Text": "setTry(n)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set each point of the quad individually."
  },
  {
    "Text": "setBrx(n)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set each point of the quad individually."
  },
  {
    "Text": "setBry(n)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set each point of the quad individually."
  },
  {
    "Text": "setBlx(n)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set each point of the quad individually."
  },
  {
    "Text": "setBly(n)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set each point of the quad individually."
  },
  {
    "Text": "getTlx()",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Get each point of the quad individually."
  },
  {
    "Text": "getTly()",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Get each point of the quad individually."
  },
  {
    "Text": "getTrx()",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Get each point of the quad individually."
  },
  {
    "Text": "getTry()",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Get each point of the quad individually."
  },
  {
    "Text": "getBrx()",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Get each point of the quad individually."
  },
  {
    "Text": "getBry()",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Get each point of the quad individually."
  },
  {
    "Text": "getBlx()",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Get each point of the quad individually."
  },
  {
    "Text": "getBly()",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Get each point of the quad individually."
  },
  {
    "Text": "setFromRect(rect)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set the points of the quad to an axis-aligned rectangle given by an SDK.Rect. Note that this is only useful if you subsequently make further modifications to the quad, else you may as well use the Rect interface directly."
  },
  {
    "Text": "setFromRotatedRect(rect, angle)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Set the points of the quad to a rotated rectangle given by an SDK.Rect, rotated about the origin by angle in radians."
  },
  {
    "Text": "getBoundingBox(rect)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Calculate the bounding box of the quad, and store the result by writing to a given SDK.Rect."
  },
  {
    "Text": "midX()",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Return the average of the four points in the quad on each axis."
  },
  {
    "Text": "midY()",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Return the average of the four points in the quad on each axis."
  },
  {
    "Text": "intersectsSegment(x1, y1, x2, y2)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Test if a segment, given as the line between points (x1, y1) and (x2, y2), intersects this quad, returning a boolean."
  },
  {
    "Text": "intersectsQuad(quad)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Test if another SDK.Quad intersects this quad, returning a boolean."
  },
  {
    "Text": "containsPoint(x, y)",
    "Type": 0,
    "Container": "Quad",
    "DescriptionText": "Test if the given point is inside the bounds of this quad, returning a boolean."
  },
  {
    "Text": "SetAlphaBlendMode()",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set the blend mode to a premultiplied alpha blending mode."
  },
  {
    "Text": "SetColorFillMode()",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set the fill mode to draw a solid color, specified by the current color."
  },
  {
    "Text": "SetTextureFillMode()",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set the fill mode to draw a texture, specified by the current texture, and using the alpha component of the current color as the opacity."
  },
  {
    "Text": "SetSmoothLineFillMode()",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set the fill mode to draw smooth lines using the current color."
  },
  {
    "Text": "SetColor(color)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set the current color with an SDK.Color."
  },
  {
    "Text": "SetColorRgba(r, g, b, a)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set the current color by directly passing the RGBA components."
  },
  {
    "Text": "SetOpacity(o)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set only the alpha component of the current color. Note this does not affect the RGB components."
  },
  {
    "Text": "ResetColor()",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set the current color to (1, 1, 1, 1)."
  },
  {
    "Text": "Rect(rect)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Draw a rectangle given by an SDK.Rect."
  },
  {
    "Text": "Rect2(left, top, right, bottom)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Draw a rectangle by directly passing the left, top, right and bottom positions."
  },
  {
    "Text": "Quad(quad)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Draw a quad given by an SDK.Quad."
  },
  {
    "Text": "Quad2(tlx, tly, trx, try_, brx, bry, blx, bly)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Draw a quad by directly passing the positions of each of the four points in the quad."
  },
  {
    "Text": "Quad3(quad, rect)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Draw a quad given by an SDK.Quad, using an SDK.Rect for the source texture co-ordinates to draw from."
  },
  {
    "Text": "Quad4(quad, texQuad)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Draw a quad given by an SDK.Quad, using another SDK.Quad for the source texture co-ordinates to draw from."
  },
  {
    "Text": "ConvexPoly(pointsArray)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Draw a convex polygon using the given array of points, in alternating X, Y order. Therefore the size of the array must be even, and must contain at least six elements (to define three points)."
  },
  {
    "Text": "Line(x1, y1, x2, y2)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Draws a quad from the point (x1, y1) to (x2, y2) with the current line width."
  },
  {
    "Text": "TexturedLine(x1, y1, x2, y2, u, v)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Draws a quad from the point (x1, y1) to (x2, y2) with the current line width, and using (u, 0) as the texture co-ordinates at the start, and (v, 0) as the texture co-ordinates at the end."
  },
  {
    "Text": "LineRect(left, top, right, bottom)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Draws four lines along the edges of a given rectangle."
  },
  {
    "Text": "LineRect2(rect)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Draws four lines along the edges of a given SDK.Rect."
  },
  {
    "Text": "LineQuad(quad)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Draws four lines along the edges of a given SDK.Quad."
  },
  {
    "Text": "PushLineWidth(w)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set the current line width for line-drawing calls. This must be followed by a PopLineWidth() call when finished to restore the previous line width."
  },
  {
    "Text": "PopLineWidth()",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set the current line width for line-drawing calls. This must be followed by a PopLineWidth() call when finished to restore the previous line width."
  },
  {
    "Text": "PushLineCap(lineCap)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set the current line cap for line-drawing calls. This must be followed by a PopLineCap() call when finished to restore the previous line cap. The available line caps are \"butt\" and \"square\"."
  },
  {
    "Text": "PopLineCap()",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set the current line cap for line-drawing calls. This must be followed by a PopLineCap() call when finished to restore the previous line cap. The available line caps are \"butt\" and \"square\"."
  },
  {
    "Text": "SetTexture(texture)",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Set the current texture to a given IWebGLTexture."
  },
  {
    "Text": "CreateWebGLText()",
    "Type": 0,
    "Container": "IWebGLRenderer",
    "DescriptionText": "Return a new IWebGLText interface. This manages text wrapping, drawing text, and uploading the results to a WebGL texture."
  },
  {
    "Text": "Release()",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Destroy the object and its resources. IWebGLText must be released when it is no longer needed; do not simply drop references, otherwise not all of its resources will be collected. If your plugin creates an IWebGLText, it should release any it still uses in its own Release() method."
  },
  {
    "Text": "SetFontName(name)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set the name of the font face used for drawing text."
  },
  {
    "Text": "SetFontSize(ptSize)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set the size of the font, in points, used for drawing text."
  },
  {
    "Text": "SetLineHeight(px)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set the extra line height spacing, in pixels, used for drawing text. Note 0 is the default, indicating no offset to the default line height."
  },
  {
    "Text": "SetBold(b)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set the bold flag used for drawing text."
  },
  {
    "Text": "SetItalic(i)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set the italic flag used for drawing text."
  },
  {
    "Text": "SetColor(color)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set the color of the text using a SDK.Color or a string. If a string is passed, it is passed directly to a 2D canvas fillStyle property, so can be anything that property accepts, e.g. \"red\", \"#00ffee\", \"rgb(0, 128, 192)\" etc."
  },
  {
    "Text": "SetColorRgb(r, g, b)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set the color of the text using separate RGB components."
  },
  {
    "Text": "SetHorizontalAlignment(h)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set the horizontal alignment of the text within its bounding box. This can be one of \"left\", \"center\" or \"right\"."
  },
  {
    "Text": "SetVerticalAlignment(v)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set the vertical alignment of the text within its bounding box. This can be one of \"top\", \"center\" or \"bottom\"."
  },
  {
    "Text": "SetWordWrapMode(m)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set the word wrapping mode. This can be one of \"word\" (for space-delimited word wrapping) or \"character\" (for wrapping on any character)."
  },
  {
    "Text": "SetText(text)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set the text string to be drawn."
  },
  {
    "Text": "SetSize(width, height, zoomScale)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set the size of the area that text can be drawn in. The size is specified in CSS pixels. The zoomScale can be increased to render the text at a higher resolution, which is useful when zooming in the Layout View."
  },
  {
    "Text": "GetTexture()",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Get an IWebGLTexture interface representing the texture with the requested text rendered on to it. Note: the texture is generated asynchronously, so can return null when first requested. Use SetTextureUpdateCallback() to get a callback when the texture has updated, where the relevant Layout View can be redrawn to render with the updated texture."
  },
  {
    "Text": "GetTexRect()",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Return a SDK.Rect representing the content area of the text on the WebGL texture. This is the subset of the texture that ought to be rendered. Note: this is only valid when GetTexture() returns a non-null result."
  },
  {
    "Text": "SetTextureUpdateCallback(callback)",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Set a function to call when the texture containing the rendered text is updated. Since the texture is generated asynchronously, this is necessary to know when to redraw any views that may be displaying the text, so they can redraw with the updated texture."
  },
  {
    "Text": "ReleaseTexture()",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Release the underlying WebGL texture. This can be used to save memory. However the texture will be re-created the next time GetTexture() is called."
  },
  {
    "Text": "GetTextWidth()",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Return the size of the text bounding box after processing word wrap. This allows determining the size of the actual visible text, rather than the box used for word wrap bounds."
  },
  {
    "Text": "GetTextHeight()",
    "Type": 0,
    "Container": "IWebGLText",
    "DescriptionText": "Return the size of the text bounding box after processing word wrap. This allows determining the size of the actual visible text, rather than the box used for word wrap bounds."
  },
  {
    "Text": "GetWidth()",
    "Type": 0,
    "Container": "IWebGLTexture",
    "DescriptionText": "Return the width or height of the texture. Note this refers to the source texture. Construct's in-editor spritesheeting engine means the texture could be significantly larger than an object's image to be rendered from it."
  },
  {
    "Text": "GetHeight()",
    "Type": 0,
    "Container": "IWebGLTexture",
    "DescriptionText": "Return the width or height of the texture. Note this refers to the source texture. Construct's in-editor spritesheeting engine means the texture could be significantly larger than an object's image to be rendered from it."
  },
  {
    "Text": "set(left, top, right, bottom)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Set all sides of the rectangle in one call."
  },
  {
    "Text": "copy(rect)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Set all sides of the rectangle by copying another SDK.Rect."
  },
  {
    "Text": "clone()",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Return a new instance of an SDK.Rect with identical values to this one."
  },
  {
    "Text": "setLeft(left)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Set the position of each side of the rectangle individually."
  },
  {
    "Text": "setTop(top)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Set the position of each side of the rectangle individually."
  },
  {
    "Text": "setRight(right)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Set the position of each side of the rectangle individually."
  },
  {
    "Text": "setBottom(bottom)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Set the position of each side of the rectangle individually."
  },
  {
    "Text": "getLeft()",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Get the positition of each side of the rectangle individually."
  },
  {
    "Text": "getTop()",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Get the positition of each side of the rectangle individually."
  },
  {
    "Text": "getRight()",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Get the positition of each side of the rectangle individually."
  },
  {
    "Text": "getBottom()",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Get the positition of each side of the rectangle individually."
  },
  {
    "Text": "width()",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Get the width or height of the rectangle. Note if the right edge is to the left of theleft edge, or the bottom edge above the top edge, this will return a negative size."
  },
  {
    "Text": "height()",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Get the width or height of the rectangle. Note if the right edge is to the left of theleft edge, or the bottom edge above the top edge, this will return a negative size."
  },
  {
    "Text": "midX()",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Return the average of the left and right, or top and bottom, positions."
  },
  {
    "Text": "midY()",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Return the average of the left and right, or top and bottom, positions."
  },
  {
    "Text": "offset(x, y)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Add x to the left and right positions, and y to the top and bottom positions, offsettingthe entire rectangle."
  },
  {
    "Text": "inflate(x, y)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Expand or shrink the rectangle using the given offsets. Inflating subtracts from the leftand top edges and adds to the right and bottom edges, and deflating does the opposite."
  },

  {
    "Text": "deflate(x, y)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Expand or shrink the rectangle using the given offsets. Inflating subtracts from the leftand top edges and adds to the right and bottom edges, and deflating does the opposite."
  },
  {
    "Text": "multiply(x, y)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Multiply or divide each position by a given factor on each axis."
  },
  {
    "Text": "divide(x, y)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Multiply or divide each position by a given factor on each axis."
  },
  {
    "Text": "clamp(left, top, right, bottom)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Clamp each position in the rectangle to a given value, ensuring the rectangle does notextend beyond the bounds of the passed rectangle."
  },
  {
    "Text": "normalize()",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Normalize the rectangle positions, swapping the left-right positions if the rightposition is on the left, and swapping the top-bottom positions if the bottom position is on the top. This ensures the width and height are positive."
  },
  {
    "Text": "intersectsRect(rect)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Test for an intersection with another SDK.Rect, returning a boolean indicating if itintersects."
  },
  {
    "Text": "containsPoint(x, y)",
    "Type": 0,
    "Container": "Rect",
    "DescriptionText": "Test if the given point is inside the bounds of this rectangle, returning a boolean."
  },
  {
    "Text": "Color()",
    "Type": 2,
    "Container": "C3",
    "DescriptionText": "A Color can be constructed with no parameters, which defaults all components to zero, or with given RGBA components."
  },
  {
    "Text": "Color(r, g, b, a)",
    "Type": 2,
    "Container": "C3",
    "DescriptionText": "A Color can be constructed with no parameters, which defaults all components to zero, or with given RGBA components."
  },
  {
    "Text": "Quad()",
    "Type": 2,
    "Container": "C3",
    "DescriptionText": "A Quad can be constructed with no parameters, which defaults all co-ordinates to zero, or with given positions for each point. The naming convention is tl for the \"top-left\" point, tr for the \"top-right\" point, br for the \"bottom-right\" point, and bl for the \"bottom-left\" point, followed by \"x\" or \"y\" for each component of the point. Note that the points can appear at any orientation for rotated quads; the names only correspond to their actual position when the quad is set to an unrotated rectangle."
  },
  {
    "Text": "Quad(tlx, tly, trx, try_, brx, bry, blx, bly)",
    "Type": 2,
    "Container": "C3",
    "DescriptionText": "A Quad can be constructed with no parameters, which defaults all co-ordinates to zero, or with given positions for each point. The naming convention is tl for the \"top-left\" point, tr for the \"top-right\" point, br for the \"bottom-right\" point, and bl for the \"bottom-left\" point, followed by \"x\" or \"y\" for each component of the point. Note that the points can appear at any orientation for rotated quads; the names only correspond to their actual position when the quad is set to an unrotated rectangle."
  },
  {
    "Text": "Rect();",
    "Type": 2,
    "Container": "C3",
    "DescriptionText": "A Rect can be constructed with no parameters, which defaults all co-ordinates to zero, or with given positions for the left, top, right and bottom positions"
  },
  {
    "Text": "Rect(left, top, right, bottom);",
    "Type": 2,
    "Container": "C3",
    "DescriptionText": "A Rect can be constructed with no parameters, which defaults all co-ordinates to zero, or with given positions for the left, top, right and bottom positions"
  }
]
