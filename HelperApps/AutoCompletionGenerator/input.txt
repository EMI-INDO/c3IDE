c3_callFunction(name, params)
0
C3
When the Function plugin is present in a project, it creates a global function that can be used to invoke a function from JavaScript. Note this function does not exist if the Function plugin is not present in the project, so calling code should check for the existence of the method first. Synchronously trigger the function with the given name in the event system. params is optional and can be omitted if no parameters are to be passed; otherwise it must be an array of the parameters to pass. Parameters may only be string or number primitives - any other types will return as 0 in Construct. If the function in the event system returns a value, it is also returned by this method, and also can only return a string or number primitive.
C3.Plugins.Array
3
C3
The built-in Array plugin SDK
C3.Plugins.Tilemap
3
C3
The built-in Tilemap plugin
C3.Plugins.Dictionary
3
C3
The built-in Dictionary plugin SDK
At(x, y, z)
0
C3.Plugins.Array
Retrieve an element from the array at the given X, Y and Z co-ordinates. For one or two dimensional access, pass 0 for the unused components.
Set(x, y, z, val)
0
C3.Plugins.Array
Set an element in the array at the given X, Y and Z co-ordinates. For one or two dimensional access, pass 0 for the unused components.
SetSize(w, h, d)
0
C3.Plugins.Array
Set the size of the array in up to three dimensions. For one or two dimensional arrays, pass 1 for the unused dimensions. (Note passing 0 for any dimension will create an array with zero elements that cannot store any data.) If the array grows, new elements have the value 0. If the array shrinks, elements are removed.
GetWidth()
0
C3.Plugins.Array
Retrieve the current dimensions of the array.
GetHeight()
0
C3.Plugins.Array
Retrieve the current dimensions of the array.
GetDepth()
0
C3.Plugins.Array
Retrieve the current dimensions of the array.
GetDataMap()
0
C3.Plugins.Dictionary
Return the Map which is used as the underlying data storage for the Dictionary object. This allows access to add, change, remove and iterate items.
TILE_FLIPPED_HORIZONTAL
8
C3.Plugins.Tilemap
The Tilemap plugin exposes the following flags and masks which can be used to manipulate tile numbers
TILE_FLIPPED_VERTICAL
8
C3.Plugins.Tilemap
The Tilemap plugin exposes the following flags and masks which can be used to manipulate tile numbers
TILE_FLIPPED_DIAGONAL
8
C3.Plugins.Tilemap
The Tilemap plugin exposes the following flags and masks which can be used to manipulate tile numbers
TILE_FLAGS_MASK
8
C3.Plugins.Tilemap
The Tilemap plugin exposes the following flags and masks which can be used to manipulate tile numbers
TILE_ID_MASK
8
C3.Plugins.Tilemap
The Tilemap plugin exposes the following flags and masks which can be used to manipulate tile numbers
GetTileWidth()
0
C3.Plugin.Tilemap
Get the size of a tile in pixels.
GetTileHeight()
0
C3.Plugin.Tilemap
Get the size of a tile in pixels.
GetMapWidth()
0
C3.Plugin.Tilemap
Get the size of the tilemap in tiles.
GetMapHeight()
0
C3.Plugin.Tilemap
Get the size of the tilemap in tiles.
GetTileAt(x, y)
0
C3.Plugin.Tilemap
Get the tile at a given position in tiles (i.e. (0, 0) is the top-left tile of the tilemap, regardless of the tilemap's position or the tile size). Returns -1 for empty tiles or tiles outside the tilemap; otherwise use bit operations to determine tile ID or flags separately.
SetTileAt(x, y, tile)
0
C3.Plugin.Tilemap
Set the tile at a given position in tiles. Use -1 to set a tile empty; otherwise use bit operations to combine the tile ID and flags.
this._runtime
0
SDKBehaviorBase
Reference to the associated Runtime that controls execution of the project.
GetRuntime()
0
SDKBehaviorBase
Returns this._runtime publicly.
OnCreate()
0
SDKBehaviorBase
Optional override called by the runtime when the behavior is created. This is done early on in the loading process.
GetObjectClasses()
0
SDKBehaviorBase
Return a read-only array of ObjectClass that use this kind of behavior. The order is undefined.
GetInstances()
0
SDKBehaviorBase
Return a read-only array of Instance that use this kind of behavior. The order is undefined.
this._behInst
8
SDKBehaviorInstance
Reference to the BehaviorInstance representing this behavior instance in the runtime. This allows access to Construct's built-in runtime features for behavior instances.
this._inst
8
SDKBehaviorInstance
Reference to the Instance representing the associated instance in the runtime. This is the object instance that the behavior can control.
this._runtime
8
SDKBehaviorInstance
Reference to the associated Runtime that controls execution of the project.
this._behaviorType
8
SDKBehaviorInstance
Reference to the BehaviorType representing the behavior type that this instance belongs to.
this._sdkType
8
SDKBehaviorInstance
Reference to your addon's SDK behavior type class, which derives from SDKBehaviorTypeBase.
Release()
0
SDKBehaviorInstance
Optional override for when a behavior instance is released.
GetBehaviorInstance()
0
SDKBehaviorInstance
Returns this._behInst publicly.
GetObjectInstance()
0
SDKBehaviorInstance
Returns this._inst publicly.
GetWorldInfo()
0
SDKBehaviorInstance
Returns this._inst.GetWorldInfo(), i.e. the WorldInfo for the associated object instance. Note this is only applicable when added to "world" type plugins, otherwise it returns null.
GetRuntime()
0
SDKBehaviorInstance
Returns this._runtime publicly.
GetObjectClass()
0
SDKBehaviorInstance
Returns this._objectClass publicly.
GetBehaviorType()
0
SDKBehaviorInstance
Returns this._behaviorType publicly.
GetSdkType()
0
SDKBehaviorInstance
Returns this._sdkType publicly.
GetBehavior()
0
SDKBehaviorInstance
Returns your addon's SDK behavior class, which derives from SDKBehaviorBase.
PostCreate()
0
SDKBehaviorInstance
Optional override called after the associated object instance has finished being created. This is useful since the behavior instance constructor is called during instance creation, so the final state is not ready yet.
Trigger(method)
0
SDKBehaviorInstance
Fire a trigger condition. The condition must be declared as a trigger in aces.json. Pass a full reference to the condition method, e.g. this.Trigger(C3.Behaviors.Bullet.Cnds.OnStep).
_StartTicking()
0
SDKBehaviorInstance
Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
_StartTicking2()
0
SDKBehaviorInstance
Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
_StartPostTicking()
0
SDKBehaviorInstance
Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
IsTicking()
0
SDKBehaviorInstance
Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
IsTicking2()
0
SDKBehaviorInstance
Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
IsPostTicking()
0
SDKBehaviorInstance
Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
_StopTicking()
0
SDKBehaviorInstance
Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
_StopTicking2()
0
SDKBehaviorInstance
Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
_StopPostTicking()
0
SDKBehaviorInstance
Utility methods to start or stop the runtime calling the Tick(), Tick2() or PostTick() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
Tick()
0
SDKBehaviorInstance
Optional override that is called every tick just before events are run after _StartTicking() has been called.
Tick2()
0
SDKBehaviorInstance
Optional override that is called every tick just after events are run after _StartTicking2() has been called.
PostTick()
0
SDKBehaviorInstance
Optional override that is called every tick just after all other behaviors have had their Tick() methods called. This allows behaviors to observe the state applied by other behavior's ticking. Note you should use Tick() rather than PostTick() where possible, since it is not possible to reliably observe the state applied by other behavior's post-ticking.
GetDebuggerProperties()
0
SDKBehaviorInstance
Override to return properties to display in the debugger. For more information see runtime scripts.
SaveToJson()
0
SDKBehaviorInstance
Optional override to return a JSON object that represents the state of the instance for savegames.
LoadFromJson(o)
0
SDKBehaviorInstance
Optional override accepting a JSON object returned by a prior call to SaveToJson() that represents the state of an instance to load, for savegames.
CallAction(actMethod, ...args)
0
SDKBehaviorInstance
Convenience method to run an action method with the given parameters. For example: this.CallAction(C3.Behaviors.MyAddon.Acts.MyAction, "foo", "bar")
CallExpression(expMethod, ...args)
0
SDKBehaviorInstance
Convenience method to run an expression method with the given parameters. Returns the value returned by the expression. For example: const value = this.CallExpression(C3.Behaviors.MyAddon.Exps.MyExpression)
this._objectClass
8
SDKBehaviorTypeBase
Reference to the ObjectClass representing the object type that this behavior type belongs to.
this._behaviorType
8
SDKBehaviorTypeBase
Reference to the BehaviorType representing this behavior type in the runtime.
this._runtime
8
SDKBehaviorTypeBase
Reference to the associated Runtime that controls execution of the project.
this._behavior
8
SDKBehaviorTypeBase
Reference to your addon's SDK behavior class, which derives from SDKBehaviorBase.
GetObjectClass()
0
SDKBehaviorTypeBase
Returns this._objectClass publicly.
GetBehaviorType()
0
SDKBehaviorTypeBase
Returns this._behaviorType publicly.
GetRuntime()()
0
SDKBehaviorTypeBase
Returns this._runtime publicly.
GetBehavior()
0
SDKBehaviorTypeBase
Returns this._behavior publicly.
this._inst
0
SDKInstanceBase
Reference to the Instance representing this instance in the runtime. This allows access to Construct's built-in runtime features for instances.
this._runtime
0
SDKInstanceBase
Reference to the associated Runtime that controls execution of the project.
this._objectClass
0
SDKInstanceBase
Reference to the ObjectClass representing the object type that this instance belongs to.
this._sdkType
0
SDKInstanceBase
Reference to your addon's SDK type class, which derives from SDKTypeBase.
Release()
0
SDKInstanceBase
Optional override for when an instance is released.
GetInstance()
0
SDKInstanceBase
Returns this._inst publicly.
GetRuntime()
0
SDKInstanceBase
Returns this._runtime publicly.
GetObjectClass()
0
SDKInstanceBase
Returns this._objectClass publicly.
GetSdkType()
0
SDKInstanceBase
Returns this._sdkType publicly.
GetPlugin()
0
SDKInstanceBase
Returns your addon's SDK plugin class, which derives from SDKPluginBase.
Trigger(method)
0
SDKInstanceBase
Fire a trigger condition. The condition must be declared as a trigger in aces.json. Pass a full reference to the condition method, e.g. this.Trigger(C3.Plugins.Sprite.Cnds.OnAnimFinished).
AddDOMMessageHandler(handler, callback)
0
SDKInstanceBase
Add a callback to be run to handle a message posted from a DOM-side script. The handler is a string identifier. The callback receives the posted data as an argument. Note that if the caller in the DOM-side script originally used the PostToRuntimeAsync method, the callback may be an async function, and the return value is posted back to the DOM-side script.
PostToDOM(handler, data)
0
SDKInstanceBase
Post a message to a DOM-side script. The handler is a string identifier. The data must be structurally clonable (since it is posted down a MessageChannel). The async method returns a promise that resolves with the DOM-side callback's return value. The non-async method does not return a value and the DOM-side callback's return value is discarded (i.e. a "fire and forget" message).
PostToDOMAsync(handler, data)
0
SDKInstanceBase
Post a message to a DOM-side script. The handler is a string identifier. The data must be structurally clonable (since it is posted down a MessageChannel). The async method returns a promise that resolves with the DOM-side callback's return value. The non-async method does not return a value and the DOM-side callback's return value is discarded (i.e. a "fire and forget" message).
_StartTicking()
0
SDKInstanceBase
Utility methods to start or stop the runtime calling the Tick() or Tick2() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
_StartTicking2()
0
SDKInstanceBase
Utility methods to start or stop the runtime calling the Tick() or Tick2() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
IsTicking()
0
SDKInstanceBase
Utility methods to start or stop the runtime calling the Tick() or Tick2() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
IsTicking2()
0
SDKInstanceBase
Utility methods to start or stop the runtime calling the Tick() or Tick2() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
_StopTicking()
0
SDKInstanceBase
Utility methods to start or stop the runtime calling the Tick() or Tick2() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
_StopTicking2()
0
SDKInstanceBase
Utility methods to start or stop the runtime calling the Tick() or Tick2() methods of your instance every tick, and also to check whether ticking is active. It is recommended to stop ticking whenever the tick method is no longer needed to reduce the performance overhead of ticking. Redundant calls to start or stop ticking are ignored. The first call always takes effect (i.e. calls do not stack - if you make 3 calls to start ticking then 1 call to stop ticking, ticking is stopped).
Tick()
0
SDKInstanceBase
Optional override that is called every tick just before events are run after _StartTicking() has been called.
Tick2()
0
SDKInstanceBase
Optional override that is called every tick just after events are run after _StartTicking2() has been called.
GetDebuggerProperties()
0
SDKInstanceBase
Override to return properties to display in the debugger. For more information see runtime scripts.
SaveToJson()
0
SDKInstanceBase
Optional override to return a JSON object that represents the state of the instance for savegames.
LoadFromJson(o)
0
SDKInstanceBase
Optional override accepting a JSON object returned by a prior call to SaveToJson() that represents the state of an instance to load, for savegames.
CallAction(actMethod, ...args)
0
SDKInstanceBase
Convenience method to run an action method with the given parameters. For example: this.CallAction(C3.Plugins.MyAddon.Acts.MyAction, "foo", "bar")
CallExpression(expMethod, ...args)
0
SDKInstanceBase
Convenience method to run an expression method with the given parameters. Returns the value returned by the expression. For example: const value = this.CallExpression(C3.Plugins.MyAddon.Exps.MyExpression)
this._runtime
0
SDKPluginBase
Reference to the associated Runtime that controls execution of the project.
GetRuntime()
0
SDKPluginBase
Returns this._runtime publicly.
OnCreate()
0
SDKPluginBase
Optional override called by the runtime when the plugin is created. This is done early on in the loading process.
IsSingleGlobal()
0
SDKPluginBase
Return a boolean indicating if the plugin specified it was single-global.
IsWorldType()
0
SDKPluginBase
Return a boolean indicating if the plugin specified it was the "world" type.
IsRotatable()
0
SDKPluginBase
Return a boolean indicating if the plugin specified it was rotatable.
MustPreDraw()
0
SDKPluginBase
Return a boolean indicating if the plugin specified it must pre-draw when compositing effects.
HasEffects()
0
SDKPluginBase
Return a boolean indicating if the plugin specified it could have effects added to its instances.
this._objectClass
8
SDKTypeBase
Reference to the ObjectClass representing the object type that this instance belongs to.
this._runtime
8
SDKTypeBase
Reference to the associated Runtime that controls execution of the project.
this._plugin
8
SDKTypeBase
Reference to your addon's SDK plugin class, which derives from SDKPluginBase.
GetObjectClass()
0
SDKTypeBase
Returns this._objectClass publicly.
GetRuntime()()
0
SDKTypeBase
Returns this._runtime publicly.
GetPlugin()
0
SDKTypeBase
Returns this._plugin publicly.
LoadTextures(renderer)
0
SDKTypeBase
Optional override called by the runtime when it wants your object type's textures to be created. renderer is the same class used in the editor as IWebGLRenderer. This method should return a promise that resolves when all textures have been loaded.
ReleaseTextures()
0
SDKTypeBase
Optional override called by the runtime when it wants your object type's textures to be released. This method is synchronous. Release any WebGL textures and drop the references to them.
OnDynamicTextureLoadComplete()
0
SDKTypeBase
Optional override called by the runtime when a dynamic texture load has completed. If an object is created at runtime that does not already have its textures loaded, the runtime will call LoadTextures() but continue running the game while the textures are loaded asynchronously. When they finish loading, the runtime then calls this override so you have an opportunity to update any references to the newly loaded texture.
this._worldInfo
8
SDKWorldInstanceBase
Return the WorldInfo object that represents this instance's state in the "world" (e.g. its size, position, angle etc). In the runtime this is held as a separate object.
GetWorldInfo()
0
SDKWorldInstanceBase
Returns this._worldInfo publicly.
HandleWebGLContextLoss()
0
SDKWorldInstanceBase
Utility method to enable calling of the OnWebGLContextLost() and OnWebGLContextRestored() methods.
OnWebGLContextLost()
0
SDKWorldInstanceBase
Optional overrides for handling WebGL context loss. This is only necessary if your addon creates any WebGL resources. These overrides are only called if your instance first calls HandleWebGLContextLoss() (normally in the constructor to enable these callbacks for the lifetime of the instance). In a context loss event, all WebGL resources have been released, so any references to them must be dropped. In a context restored event the resources may be recreated again if necessary. Alternatively they can be left released if a lazy-loading approach is used.
OnWebGLContextRestored()
0
SDKWorldInstanceBase
Optional overrides for handling WebGL context loss. This is only necessary if your addon creates any WebGL resources. These overrides are only called if your instance first calls HandleWebGLContextLoss() (normally in the constructor to enable these callbacks for the lifetime of the instance). In a context loss event, all WebGL resources have been released, so any references to them must be dropped. In a context restored event the resources may be recreated again if necessary. Alternatively they can be left released if a lazy-loading approach is used.
